// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::{EndianScalar, Follow};

pub enum UploadInfoBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct UploadInfoBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UploadInfoBuffer<'a> {
    type Inner = UploadInfoBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> UploadInfoBuffer<'a> {
    pub const VT_REPLICATOR: flatbuffers::VOffsetT = 4;
    pub const VT_UPLOADED: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        UploadInfoBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args UploadInfoBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<UploadInfoBuffer<'bldr>> {
        let mut builder = UploadInfoBufferBuilder::new(_fbb);
        if let Some(x) = args.uploaded {
            builder.add_uploaded(x);
        }
        if let Some(x) = args.replicator {
            builder.add_replicator(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn replicator(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    UploadInfoBuffer::VT_REPLICATOR,
                    None,
                )
        }
    }
    #[inline]
    pub fn uploaded(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    UploadInfoBuffer::VT_UPLOADED,
                    None,
                )
        }
    }
}

impl flatbuffers::Verifiable for UploadInfoBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "replicator",
                Self::VT_REPLICATOR,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "uploaded",
                Self::VT_UPLOADED,
                false,
            )?
            .finish();
        Ok(())
    }
}

pub struct UploadInfoBufferArgs<'a> {
    pub replicator: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub uploaded: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}

impl<'a> Default for UploadInfoBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        UploadInfoBufferArgs {
            replicator: None,
            uploaded: None,
        }
    }
}

pub struct UploadInfoBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> UploadInfoBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_replicator(
        &mut self,
        replicator: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            UploadInfoBuffer::VT_REPLICATOR,
            replicator,
        );
    }
    #[inline]
    pub fn add_uploaded(&mut self, uploaded: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(UploadInfoBuffer::VT_UPLOADED, uploaded);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> UploadInfoBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        UploadInfoBufferBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<UploadInfoBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for UploadInfoBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("UploadInfoBuffer");
        ds.field("replicator", &self.replicator());
        ds.field("uploaded", &self.uploaded());
        ds.finish()
    }
}
