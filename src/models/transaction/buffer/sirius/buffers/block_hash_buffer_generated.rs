// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::{EndianScalar, Follow};

pub enum BlockHashBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct BlockHashBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlockHashBuffer<'a> {
    type Inner = BlockHashBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> BlockHashBuffer<'a> {
    pub const VT_BLOCKHASHE: flatbuffers::VOffsetT = 4;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        BlockHashBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BlockHashBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<BlockHashBuffer<'bldr>> {
        let mut builder = BlockHashBufferBuilder::new(_fbb);
        if let Some(x) = args.blockHashe {
            builder.add_blockHashe(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn blockHashe(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    BlockHashBuffer::VT_BLOCKHASHE,
                    None,
                )
        }
    }
}

impl flatbuffers::Verifiable for BlockHashBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "blockHashe",
                Self::VT_BLOCKHASHE,
                false,
            )?
            .finish();
        Ok(())
    }
}

pub struct BlockHashBufferArgs<'a> {
    pub blockHashe: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}

impl<'a> Default for BlockHashBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        BlockHashBufferArgs { blockHashe: None }
    }
}

pub struct BlockHashBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> BlockHashBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_blockHashe(
        &mut self,
        blockHashe: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            BlockHashBuffer::VT_BLOCKHASHE,
            blockHashe,
        );
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BlockHashBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        BlockHashBufferBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<BlockHashBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for BlockHashBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("BlockHashBuffer");
        ds.field("blockHashe", &self.blockHashe());
        ds.finish()
    }
}
