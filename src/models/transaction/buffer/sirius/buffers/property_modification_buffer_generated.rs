// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::Follow;

pub enum PropertyModificationBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct PropertyModificationBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PropertyModificationBuffer<'a> {
    type Inner = PropertyModificationBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
    }
}

impl<'a> PropertyModificationBuffer<'a> {
    pub const VT_MODIFICATION_TYPE: flatbuffers::VOffsetT = 4;
    pub const VT_VALUE: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        PropertyModificationBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PropertyModificationBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<PropertyModificationBuffer<'bldr>> {
        let mut builder = PropertyModificationBufferBuilder::new(_fbb);
        if let Some(x) = args.value {
            builder.add_value(x);
        }
        builder.add_modification_type(args.modification_type);
        builder.finish()
    }

    #[inline]
    pub fn modification_type(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(PropertyModificationBuffer::VT_MODIFICATION_TYPE, Some(0))
                .unwrap()
        }
    }
    /// In case of address it is 25 bytes array. In case of mosaic it is 8 byte array(or 2 uint32 array).
    /// In case of transaction it is 2 byte array(ushort)
    #[inline]
    pub fn value(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                PropertyModificationBuffer::VT_VALUE,
                None,
            )
        }
    }
}

impl flatbuffers::Verifiable for PropertyModificationBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        v.visit_table(pos)?
            .visit_field::<u8>("modification_type", Self::VT_MODIFICATION_TYPE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "value",
                Self::VT_VALUE,
                false,
            )?
            .finish();
        Ok(())
    }
}

pub struct PropertyModificationBufferArgs<'a> {
    pub modification_type: u8,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}

impl<'a> Default for PropertyModificationBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        PropertyModificationBufferArgs { modification_type: 0, value: None }
    }
}

pub struct PropertyModificationBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> PropertyModificationBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_modification_type(&mut self, modification_type: u8) {
        self.fbb_.push_slot::<u8>(
            PropertyModificationBuffer::VT_MODIFICATION_TYPE,
            modification_type,
            0,
        );
    }
    #[inline]
    pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PropertyModificationBuffer::VT_VALUE,
            value,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> PropertyModificationBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        PropertyModificationBufferBuilder { fbb_: _fbb, start_: start }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<PropertyModificationBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for PropertyModificationBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("PropertyModificationBuffer");
        ds.field("modification_type", &self.modification_type());
        ds.field("value", &self.value());
        ds.finish()
    }
}
