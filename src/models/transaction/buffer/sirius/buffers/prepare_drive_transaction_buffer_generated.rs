// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::{EndianScalar, Follow};

pub enum PrepareDriveTransactionBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct PrepareDriveTransactionBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PrepareDriveTransactionBuffer<'a> {
    type Inner = PrepareDriveTransactionBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> PrepareDriveTransactionBuffer<'a> {
    pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
    pub const VT_SIGNATURE: flatbuffers::VOffsetT = 6;
    pub const VT_SIGNER: flatbuffers::VOffsetT = 8;
    pub const VT_VERSION: flatbuffers::VOffsetT = 10;
    pub const VT_TYPE_: flatbuffers::VOffsetT = 12;
    pub const VT_MAX_FEE: flatbuffers::VOffsetT = 14;
    pub const VT_DEADLINE: flatbuffers::VOffsetT = 16;
    pub const VT_OWNER: flatbuffers::VOffsetT = 18;
    pub const VT_DURATION: flatbuffers::VOffsetT = 20;
    pub const VT_BILLINGPERIOD: flatbuffers::VOffsetT = 22;
    pub const VT_BILLINGPRICE: flatbuffers::VOffsetT = 24;
    pub const VT_DRIVESIZE: flatbuffers::VOffsetT = 26;
    pub const VT_REPLICAS: flatbuffers::VOffsetT = 28;
    pub const VT_MINREPLICATORS: flatbuffers::VOffsetT = 30;
    pub const VT_PERCENTAPPROVERS: flatbuffers::VOffsetT = 32;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        PrepareDriveTransactionBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PrepareDriveTransactionBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<PrepareDriveTransactionBuffer<'bldr>> {
        let mut builder = PrepareDriveTransactionBufferBuilder::new(_fbb);
        if let Some(x) = args.driveSize {
            builder.add_driveSize(x);
        }
        if let Some(x) = args.billingPrice {
            builder.add_billingPrice(x);
        }
        if let Some(x) = args.billingPeriod {
            builder.add_billingPeriod(x);
        }
        if let Some(x) = args.duration {
            builder.add_duration(x);
        }
        if let Some(x) = args.owner {
            builder.add_owner(x);
        }
        if let Some(x) = args.deadline {
            builder.add_deadline(x);
        }
        if let Some(x) = args.max_fee {
            builder.add_max_fee(x);
        }
        builder.add_version(args.version);
        if let Some(x) = args.signer {
            builder.add_signer(x);
        }
        if let Some(x) = args.signature {
            builder.add_signature(x);
        }
        builder.add_size_(args.size_);
        builder.add_minReplicators(args.minReplicators);
        builder.add_replicas(args.replicas);
        builder.add_type_(args.type_);
        builder.add_percentApprovers(args.percentApprovers);
        builder.finish()
    }

    #[inline]
    pub fn size_(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(PrepareDriveTransactionBuffer::VT_SIZE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn signature(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    PrepareDriveTransactionBuffer::VT_SIGNATURE,
                    None,
                )
        }
    }
    #[inline]
    pub fn signer(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    PrepareDriveTransactionBuffer::VT_SIGNER,
                    None,
                )
        }
    }
    #[inline]
    pub fn version(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(PrepareDriveTransactionBuffer::VT_VERSION, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn type_(&self) -> u16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u16>(PrepareDriveTransactionBuffer::VT_TYPE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn max_fee(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    PrepareDriveTransactionBuffer::VT_MAX_FEE,
                    None,
                )
        }
    }
    #[inline]
    pub fn deadline(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    PrepareDriveTransactionBuffer::VT_DEADLINE,
                    None,
                )
        }
    }
    #[inline]
    pub fn owner(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    PrepareDriveTransactionBuffer::VT_OWNER,
                    None,
                )
        }
    }
    #[inline]
    pub fn duration(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    PrepareDriveTransactionBuffer::VT_DURATION,
                    None,
                )
        }
    }
    #[inline]
    pub fn billingPeriod(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    PrepareDriveTransactionBuffer::VT_BILLINGPERIOD,
                    None,
                )
        }
    }
    #[inline]
    pub fn billingPrice(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    PrepareDriveTransactionBuffer::VT_BILLINGPRICE,
                    None,
                )
        }
    }
    #[inline]
    pub fn driveSize(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    PrepareDriveTransactionBuffer::VT_DRIVESIZE,
                    None,
                )
        }
    }
    #[inline]
    pub fn replicas(&self) -> u16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u16>(PrepareDriveTransactionBuffer::VT_REPLICAS, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn minReplicators(&self) -> u16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u16>(PrepareDriveTransactionBuffer::VT_MINREPLICATORS, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn percentApprovers(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(PrepareDriveTransactionBuffer::VT_PERCENTAPPROVERS, Some(0))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for PrepareDriveTransactionBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u32>("size_", Self::VT_SIZE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signature",
                Self::VT_SIGNATURE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signer",
                Self::VT_SIGNER,
                false,
            )?
            .visit_field::<u32>("version", Self::VT_VERSION, false)?
            .visit_field::<u16>("type_", Self::VT_TYPE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "max_fee",
                Self::VT_MAX_FEE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "deadline",
                Self::VT_DEADLINE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "owner",
                Self::VT_OWNER,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "duration",
                Self::VT_DURATION,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "billingPeriod",
                Self::VT_BILLINGPERIOD,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "billingPrice",
                Self::VT_BILLINGPRICE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "driveSize",
                Self::VT_DRIVESIZE,
                false,
            )?
            .visit_field::<u16>("replicas", Self::VT_REPLICAS, false)?
            .visit_field::<u16>("minReplicators", Self::VT_MINREPLICATORS, false)?
            .visit_field::<u8>("percentApprovers", Self::VT_PERCENTAPPROVERS, false)?
            .finish();
        Ok(())
    }
}

pub struct PrepareDriveTransactionBufferArgs<'a> {
    pub size_: u32,
    pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub signer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub version: u32,
    pub type_: u16,
    pub max_fee: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub deadline: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub owner: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub duration: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub billingPeriod: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub billingPrice: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub driveSize: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub replicas: u16,
    pub minReplicators: u16,
    pub percentApprovers: u8,
}

impl<'a> Default for PrepareDriveTransactionBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        PrepareDriveTransactionBufferArgs {
            size_: 0,
            signature: None,
            signer: None,
            version: 0,
            type_: 0,
            max_fee: None,
            deadline: None,
            owner: None,
            duration: None,
            billingPeriod: None,
            billingPrice: None,
            driveSize: None,
            replicas: 0,
            minReplicators: 0,
            percentApprovers: 0,
        }
    }
}

pub struct PrepareDriveTransactionBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> PrepareDriveTransactionBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_size_(&mut self, size_: u32) {
        self.fbb_
            .push_slot::<u32>(PrepareDriveTransactionBuffer::VT_SIZE_, size_, 0);
    }
    #[inline]
    pub fn add_signature(
        &mut self,
        signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PrepareDriveTransactionBuffer::VT_SIGNATURE,
            signature,
        );
    }
    #[inline]
    pub fn add_signer(&mut self, signer: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PrepareDriveTransactionBuffer::VT_SIGNER,
            signer,
        );
    }
    #[inline]
    pub fn add_version(&mut self, version: u32) {
        self.fbb_
            .push_slot::<u32>(PrepareDriveTransactionBuffer::VT_VERSION, version, 0);
    }
    #[inline]
    pub fn add_type_(&mut self, type_: u16) {
        self.fbb_
            .push_slot::<u16>(PrepareDriveTransactionBuffer::VT_TYPE_, type_, 0);
    }
    #[inline]
    pub fn add_max_fee(&mut self, max_fee: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PrepareDriveTransactionBuffer::VT_MAX_FEE,
            max_fee,
        );
    }
    #[inline]
    pub fn add_deadline(&mut self, deadline: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PrepareDriveTransactionBuffer::VT_DEADLINE,
            deadline,
        );
    }
    #[inline]
    pub fn add_owner(&mut self, owner: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PrepareDriveTransactionBuffer::VT_OWNER,
            owner,
        );
    }
    #[inline]
    pub fn add_duration(&mut self, duration: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PrepareDriveTransactionBuffer::VT_DURATION,
            duration,
        );
    }
    #[inline]
    pub fn add_billingPeriod(
        &mut self,
        billingPeriod: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PrepareDriveTransactionBuffer::VT_BILLINGPERIOD,
            billingPeriod,
        );
    }
    #[inline]
    pub fn add_billingPrice(
        &mut self,
        billingPrice: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PrepareDriveTransactionBuffer::VT_BILLINGPRICE,
            billingPrice,
        );
    }
    #[inline]
    pub fn add_driveSize(
        &mut self,
        driveSize: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            PrepareDriveTransactionBuffer::VT_DRIVESIZE,
            driveSize,
        );
    }
    #[inline]
    pub fn add_replicas(&mut self, replicas: u16) {
        self.fbb_
            .push_slot::<u16>(PrepareDriveTransactionBuffer::VT_REPLICAS, replicas, 0);
    }
    #[inline]
    pub fn add_minReplicators(&mut self, minReplicators: u16) {
        self.fbb_.push_slot::<u16>(
            PrepareDriveTransactionBuffer::VT_MINREPLICATORS,
            minReplicators,
            0,
        );
    }
    #[inline]
    pub fn add_percentApprovers(&mut self, percentApprovers: u8) {
        self.fbb_.push_slot::<u8>(
            PrepareDriveTransactionBuffer::VT_PERCENTAPPROVERS,
            percentApprovers,
            0,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> PrepareDriveTransactionBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        PrepareDriveTransactionBufferBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<PrepareDriveTransactionBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for PrepareDriveTransactionBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("PrepareDriveTransactionBuffer");
        ds.field("size_", &self.size_());
        ds.field("signature", &self.signature());
        ds.field("signer", &self.signer());
        ds.field("version", &self.version());
        ds.field("type_", &self.type_());
        ds.field("max_fee", &self.max_fee());
        ds.field("deadline", &self.deadline());
        ds.field("owner", &self.owner());
        ds.field("duration", &self.duration());
        ds.field("billingPeriod", &self.billingPeriod());
        ds.field("billingPrice", &self.billingPrice());
        ds.field("driveSize", &self.driveSize());
        ds.field("replicas", &self.replicas());
        ds.field("minReplicators", &self.minReplicators());
        ds.field("percentApprovers", &self.percentApprovers());
        ds.finish()
    }
}
