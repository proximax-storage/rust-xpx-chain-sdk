// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::{EndianScalar, Follow};

pub enum SecretProofTransactionBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct SecretProofTransactionBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SecretProofTransactionBuffer<'a> {
    type Inner = SecretProofTransactionBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> SecretProofTransactionBuffer<'a> {
    pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
    pub const VT_SIGNATURE: flatbuffers::VOffsetT = 6;
    pub const VT_SIGNER: flatbuffers::VOffsetT = 8;
    pub const VT_VERSION: flatbuffers::VOffsetT = 10;
    pub const VT_TYPE_: flatbuffers::VOffsetT = 12;
    pub const VT_MAX_FEE: flatbuffers::VOffsetT = 14;
    pub const VT_DEADLINE: flatbuffers::VOffsetT = 16;
    pub const VT_HASHALGORITHM: flatbuffers::VOffsetT = 18;
    pub const VT_SECRET: flatbuffers::VOffsetT = 20;
    pub const VT_RECIPIENT: flatbuffers::VOffsetT = 22;
    pub const VT_PROOFSIZE: flatbuffers::VOffsetT = 24;
    pub const VT_PROOF: flatbuffers::VOffsetT = 26;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SecretProofTransactionBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SecretProofTransactionBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<SecretProofTransactionBuffer<'bldr>> {
        let mut builder = SecretProofTransactionBufferBuilder::new(_fbb);
        if let Some(x) = args.proof {
            builder.add_proof(x);
        }
        if let Some(x) = args.recipient {
            builder.add_recipient(x);
        }
        if let Some(x) = args.secret {
            builder.add_secret(x);
        }
        if let Some(x) = args.deadline {
            builder.add_deadline(x);
        }
        if let Some(x) = args.max_fee {
            builder.add_max_fee(x);
        }
        builder.add_version(args.version);
        if let Some(x) = args.signer {
            builder.add_signer(x);
        }
        if let Some(x) = args.signature {
            builder.add_signature(x);
        }
        builder.add_size_(args.size_);
        builder.add_proofSize(args.proofSize);
        builder.add_type_(args.type_);
        builder.add_hashAlgorithm(args.hashAlgorithm);
        builder.finish()
    }

    #[inline]
    pub fn size_(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(SecretProofTransactionBuffer::VT_SIZE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn signature(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SecretProofTransactionBuffer::VT_SIGNATURE,
                    None,
                )
        }
    }
    #[inline]
    pub fn signer(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SecretProofTransactionBuffer::VT_SIGNER,
                    None,
                )
        }
    }
    #[inline]
    pub fn version(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(SecretProofTransactionBuffer::VT_VERSION, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn type_(&self) -> u16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u16>(SecretProofTransactionBuffer::VT_TYPE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn max_fee(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    SecretProofTransactionBuffer::VT_MAX_FEE,
                    None,
                )
        }
    }
    #[inline]
    pub fn deadline(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    SecretProofTransactionBuffer::VT_DEADLINE,
                    None,
                )
        }
    }
    #[inline]
    pub fn hashAlgorithm(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(SecretProofTransactionBuffer::VT_HASHALGORITHM, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn secret(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SecretProofTransactionBuffer::VT_SECRET,
                    None,
                )
        }
    }
    #[inline]
    pub fn recipient(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SecretProofTransactionBuffer::VT_RECIPIENT,
                    None,
                )
        }
    }
    #[inline]
    pub fn proofSize(&self) -> u16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u16>(SecretProofTransactionBuffer::VT_PROOFSIZE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn proof(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SecretProofTransactionBuffer::VT_PROOF,
                    None,
                )
        }
    }
}

impl flatbuffers::Verifiable for SecretProofTransactionBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u32>("size_", Self::VT_SIZE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signature",
                Self::VT_SIGNATURE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signer",
                Self::VT_SIGNER,
                false,
            )?
            .visit_field::<u32>("version", Self::VT_VERSION, false)?
            .visit_field::<u16>("type_", Self::VT_TYPE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "max_fee",
                Self::VT_MAX_FEE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "deadline",
                Self::VT_DEADLINE,
                false,
            )?
            .visit_field::<u8>("hashAlgorithm", Self::VT_HASHALGORITHM, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "secret",
                Self::VT_SECRET,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "recipient",
                Self::VT_RECIPIENT,
                false,
            )?
            .visit_field::<u16>("proofSize", Self::VT_PROOFSIZE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "proof",
                Self::VT_PROOF,
                false,
            )?
            .finish();
        Ok(())
    }
}

pub struct SecretProofTransactionBufferArgs<'a> {
    pub size_: u32,
    pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub signer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub version: u32,
    pub type_: u16,
    pub max_fee: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub deadline: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub hashAlgorithm: u8,
    pub secret: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub recipient: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub proofSize: u16,
    pub proof: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}

impl<'a> Default for SecretProofTransactionBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        SecretProofTransactionBufferArgs {
            size_: 0,
            signature: None,
            signer: None,
            version: 0,
            type_: 0,
            max_fee: None,
            deadline: None,
            hashAlgorithm: 0,
            secret: None,
            recipient: None,
            proofSize: 0,
            proof: None,
        }
    }
}

pub struct SecretProofTransactionBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> SecretProofTransactionBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_size_(&mut self, size_: u32) {
        self.fbb_
            .push_slot::<u32>(SecretProofTransactionBuffer::VT_SIZE_, size_, 0);
    }
    #[inline]
    pub fn add_signature(
        &mut self,
        signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            SecretProofTransactionBuffer::VT_SIGNATURE,
            signature,
        );
    }
    #[inline]
    pub fn add_signer(&mut self, signer: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            SecretProofTransactionBuffer::VT_SIGNER,
            signer,
        );
    }
    #[inline]
    pub fn add_version(&mut self, version: u32) {
        self.fbb_
            .push_slot::<u32>(SecretProofTransactionBuffer::VT_VERSION, version, 0);
    }
    #[inline]
    pub fn add_type_(&mut self, type_: u16) {
        self.fbb_
            .push_slot::<u16>(SecretProofTransactionBuffer::VT_TYPE_, type_, 0);
    }
    #[inline]
    pub fn add_max_fee(&mut self, max_fee: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            SecretProofTransactionBuffer::VT_MAX_FEE,
            max_fee,
        );
    }
    #[inline]
    pub fn add_deadline(&mut self, deadline: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            SecretProofTransactionBuffer::VT_DEADLINE,
            deadline,
        );
    }
    #[inline]
    pub fn add_hashAlgorithm(&mut self, hashAlgorithm: u8) {
        self.fbb_.push_slot::<u8>(
            SecretProofTransactionBuffer::VT_HASHALGORITHM,
            hashAlgorithm,
            0,
        );
    }
    #[inline]
    pub fn add_secret(&mut self, secret: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            SecretProofTransactionBuffer::VT_SECRET,
            secret,
        );
    }
    #[inline]
    pub fn add_recipient(
        &mut self,
        recipient: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            SecretProofTransactionBuffer::VT_RECIPIENT,
            recipient,
        );
    }
    #[inline]
    pub fn add_proofSize(&mut self, proofSize: u16) {
        self.fbb_
            .push_slot::<u16>(SecretProofTransactionBuffer::VT_PROOFSIZE, proofSize, 0);
    }
    #[inline]
    pub fn add_proof(&mut self, proof: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            SecretProofTransactionBuffer::VT_PROOF,
            proof,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> SecretProofTransactionBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        SecretProofTransactionBufferBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<SecretProofTransactionBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for SecretProofTransactionBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("SecretProofTransactionBuffer");
        ds.field("size_", &self.size_());
        ds.field("signature", &self.signature());
        ds.field("signer", &self.signer());
        ds.field("version", &self.version());
        ds.field("type_", &self.type_());
        ds.field("max_fee", &self.max_fee());
        ds.field("deadline", &self.deadline());
        ds.field("hashAlgorithm", &self.hashAlgorithm());
        ds.field("secret", &self.secret());
        ds.field("recipient", &self.recipient());
        ds.field("proofSize", &self.proofSize());
        ds.field("proof", &self.proof());
        ds.finish()
    }
}

#[inline]
/// Verifies that a buffer of bytes contains a `SecretProofTransactionBuffer`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_secret_proof_transaction_buffer_unchecked`.
pub fn root_as_secret_proof_transaction_buffer(
    buf: &[u8],
) -> Result<SecretProofTransactionBuffer, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<SecretProofTransactionBuffer>(buf)
}

#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SecretProofTransactionBuffer` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_secret_proof_transaction_buffer_unchecked`.
pub fn size_prefixed_root_as_secret_proof_transaction_buffer(
    buf: &[u8],
) -> Result<SecretProofTransactionBuffer, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<SecretProofTransactionBuffer>(buf)
}

#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SecretProofTransactionBuffer` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_secret_proof_transaction_buffer_unchecked`.
pub fn root_as_secret_proof_transaction_buffer_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<SecretProofTransactionBuffer<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<SecretProofTransactionBuffer<'b>>(opts, buf)
}

#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SecretProofTransactionBuffer` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_secret_proof_transaction_buffer_unchecked`.
pub fn size_prefixed_root_as_secret_proof_transaction_buffer_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<SecretProofTransactionBuffer<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<SecretProofTransactionBuffer<'b>>(opts, buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SecretProofTransactionBuffer and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SecretProofTransactionBuffer`.
pub unsafe fn root_as_secret_proof_transaction_buffer_unchecked(
    buf: &[u8],
) -> SecretProofTransactionBuffer {
    flatbuffers::root_unchecked::<SecretProofTransactionBuffer>(buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SecretProofTransactionBuffer and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SecretProofTransactionBuffer`.
pub unsafe fn size_prefixed_root_as_secret_proof_transaction_buffer_unchecked(
    buf: &[u8],
) -> SecretProofTransactionBuffer {
    flatbuffers::size_prefixed_root_unchecked::<SecretProofTransactionBuffer>(buf)
}

#[inline]
pub fn finish_secret_proof_transaction_buffer_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<SecretProofTransactionBuffer<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_secret_proof_transaction_buffer_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<SecretProofTransactionBuffer<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
