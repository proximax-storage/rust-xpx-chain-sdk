// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::Follow;

pub enum MetadataModificationBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct MetadataModificationBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MetadataModificationBuffer<'a> {
    type Inner = MetadataModificationBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
    }
}

impl<'a> MetadataModificationBuffer<'a> {
    pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
    pub const VT_MODIFICATION_TYPE: flatbuffers::VOffsetT = 6;
    pub const VT_KEY_SIZE: flatbuffers::VOffsetT = 8;
    pub const VT_VALUE_SIZE: flatbuffers::VOffsetT = 10;
    pub const VT_KEY: flatbuffers::VOffsetT = 12;
    pub const VT_VALUE: flatbuffers::VOffsetT = 14;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MetadataModificationBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MetadataModificationBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<MetadataModificationBuffer<'bldr>> {
        let mut builder = MetadataModificationBufferBuilder::new(_fbb);
        if let Some(x) = args.value {
            builder.add_value(x);
        }
        if let Some(x) = args.key {
            builder.add_key(x);
        }
        if let Some(x) = args.value_size {
            builder.add_value_size(x);
        }
        builder.add_size_(args.size_);
        builder.add_key_size(args.key_size);
        builder.add_modification_type(args.modification_type);
        builder.finish()
    }

    #[inline]
    pub fn size_(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u32>(MetadataModificationBuffer::VT_SIZE_, Some(0)).unwrap() }
    }
    #[inline]
    pub fn modification_type(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(MetadataModificationBuffer::VT_MODIFICATION_TYPE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn key_size(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u8>(MetadataModificationBuffer::VT_KEY_SIZE, Some(0)).unwrap() }
    }
    #[inline]
    pub fn value_size(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                MetadataModificationBuffer::VT_VALUE_SIZE,
                None,
            )
        }
    }
    #[inline]
    pub fn key(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                MetadataModificationBuffer::VT_KEY,
                None,
            )
        }
    }
    #[inline]
    pub fn value(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                MetadataModificationBuffer::VT_VALUE,
                None,
            )
        }
    }
}

impl flatbuffers::Verifiable for MetadataModificationBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        v.visit_table(pos)?
            .visit_field::<u32>("size_", Self::VT_SIZE_, false)?
            .visit_field::<u8>("modification_type", Self::VT_MODIFICATION_TYPE, false)?
            .visit_field::<u8>("key_size", Self::VT_KEY_SIZE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "value_size",
                Self::VT_VALUE_SIZE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "key",
                Self::VT_KEY,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "value",
                Self::VT_VALUE,
                false,
            )?
            .finish();
        Ok(())
    }
}

pub struct MetadataModificationBufferArgs<'a> {
    pub size_: u32,
    pub modification_type: u8,
    pub key_size: u8,
    pub value_size: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}

impl<'a> Default for MetadataModificationBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        MetadataModificationBufferArgs {
            size_: 0,
            modification_type: 0,
            key_size: 0,
            value_size: None,
            key: None,
            value: None,
        }
    }
}

pub struct MetadataModificationBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> MetadataModificationBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_size_(&mut self, size_: u32) {
        self.fbb_.push_slot::<u32>(MetadataModificationBuffer::VT_SIZE_, size_, 0);
    }
    #[inline]
    pub fn add_modification_type(&mut self, modification_type: u8) {
        self.fbb_.push_slot::<u8>(
            MetadataModificationBuffer::VT_MODIFICATION_TYPE,
            modification_type,
            0,
        );
    }
    #[inline]
    pub fn add_key_size(&mut self, key_size: u8) {
        self.fbb_.push_slot::<u8>(MetadataModificationBuffer::VT_KEY_SIZE, key_size, 0);
    }
    #[inline]
    pub fn add_value_size(
        &mut self,
        value_size: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            MetadataModificationBuffer::VT_VALUE_SIZE,
            value_size,
        );
    }
    #[inline]
    pub fn add_key(&mut self, key: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(MetadataModificationBuffer::VT_KEY, key);
    }
    #[inline]
    pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            MetadataModificationBuffer::VT_VALUE,
            value,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> MetadataModificationBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        MetadataModificationBufferBuilder { fbb_: _fbb, start_: start }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<MetadataModificationBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for MetadataModificationBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("MetadataModificationBuffer");
        ds.field("size_", &self.size_());
        ds.field("modification_type", &self.modification_type());
        ds.field("key_size", &self.key_size());
        ds.field("value_size", &self.value_size());
        ds.field("key", &self.key());
        ds.field("value", &self.value());
        ds.finish()
    }
}
