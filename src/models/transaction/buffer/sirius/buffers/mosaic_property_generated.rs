// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::Follow;

pub enum MosaicPropertyOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct MosaicProperty<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MosaicProperty<'a> {
    type Inner = MosaicProperty<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
    }
}

impl<'a> MosaicProperty<'a> {
    pub const VT_MOSAIC_PROPERTY_ID: flatbuffers::VOffsetT = 4;
    pub const VT_VALUE: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MosaicProperty { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MosaicPropertyArgs<'args>,
    ) -> flatbuffers::WIPOffset<MosaicProperty<'bldr>> {
        let mut builder = MosaicPropertyBuilder::new(_fbb);
        if let Some(x) = args.value {
            builder.add_value(x);
        }
        builder.add_mosaic_property_id(args.mosaic_property_id);
        builder.finish()
    }

    #[inline]
    pub fn mosaic_property_id(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u8>(MosaicProperty::VT_MOSAIC_PROPERTY_ID, Some(0)).unwrap() }
    }
    #[inline]
    pub fn value(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                MosaicProperty::VT_VALUE,
                None,
            )
        }
    }
}

impl flatbuffers::Verifiable for MosaicProperty<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        v.visit_table(pos)?
            .visit_field::<u8>("mosaic_property_id", Self::VT_MOSAIC_PROPERTY_ID, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "value",
                Self::VT_VALUE,
                false,
            )?
            .finish();
        Ok(())
    }
}

pub struct MosaicPropertyArgs<'a> {
    pub mosaic_property_id: u8,
    pub value: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}

impl<'a> Default for MosaicPropertyArgs<'a> {
    #[inline]
    fn default() -> Self {
        MosaicPropertyArgs { mosaic_property_id: 0, value: None }
    }
}

pub struct MosaicPropertyBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> MosaicPropertyBuilder<'a, 'b> {
    #[inline]
    pub fn add_mosaic_property_id(&mut self, mosaic_property_id: u8) {
        self.fbb_
            .push_slot::<u8>(MosaicProperty::VT_MOSAIC_PROPERTY_ID, mosaic_property_id, 0);
    }
    #[inline]
    pub fn add_value(&mut self, value: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(MosaicProperty::VT_VALUE, value);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MosaicPropertyBuilder<'a, 'b> {
        let start = _fbb.start_table();
        MosaicPropertyBuilder { fbb_: _fbb, start_: start }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<MosaicProperty<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for MosaicProperty<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("MosaicProperty");
        ds.field("mosaic_property_id", &self.mosaic_property_id());
        ds.field("value", &self.value());
        ds.finish()
    }
}
