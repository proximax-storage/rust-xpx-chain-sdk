// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::{EndianScalar, Follow};

pub enum ModifyContractTransactionBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct ModifyContractTransactionBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ModifyContractTransactionBuffer<'a> {
    type Inner = ModifyContractTransactionBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> ModifyContractTransactionBuffer<'a> {
    pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
    pub const VT_SIGNATURE: flatbuffers::VOffsetT = 6;
    pub const VT_SIGNER: flatbuffers::VOffsetT = 8;
    pub const VT_VERSION: flatbuffers::VOffsetT = 10;
    pub const VT_TYPE_: flatbuffers::VOffsetT = 12;
    pub const VT_MAX_FEE: flatbuffers::VOffsetT = 14;
    pub const VT_DEADLINE: flatbuffers::VOffsetT = 16;
    pub const VT_DURATIONDELTA: flatbuffers::VOffsetT = 18;
    pub const VT_HASH: flatbuffers::VOffsetT = 20;
    pub const VT_NUMCUSTOMERS: flatbuffers::VOffsetT = 22;
    pub const VT_NUMEXECUTORS: flatbuffers::VOffsetT = 24;
    pub const VT_NUMVERIFIERS: flatbuffers::VOffsetT = 26;
    pub const VT_CUSTOMERS: flatbuffers::VOffsetT = 28;
    pub const VT_EXECUTORS: flatbuffers::VOffsetT = 30;
    pub const VT_VERIFIERS: flatbuffers::VOffsetT = 32;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ModifyContractTransactionBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ModifyContractTransactionBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<ModifyContractTransactionBuffer<'bldr>> {
        let mut builder = ModifyContractTransactionBufferBuilder::new(_fbb);
        if let Some(x) = args.verifiers {
            builder.add_verifiers(x);
        }
        if let Some(x) = args.executors {
            builder.add_executors(x);
        }
        if let Some(x) = args.customers {
            builder.add_customers(x);
        }
        if let Some(x) = args.hash {
            builder.add_hash(x);
        }
        if let Some(x) = args.durationDelta {
            builder.add_durationDelta(x);
        }
        if let Some(x) = args.deadline {
            builder.add_deadline(x);
        }
        if let Some(x) = args.max_fee {
            builder.add_max_fee(x);
        }
        builder.add_version(args.version);
        if let Some(x) = args.signer {
            builder.add_signer(x);
        }
        if let Some(x) = args.signature {
            builder.add_signature(x);
        }
        builder.add_size_(args.size_);
        builder.add_type_(args.type_);
        builder.add_numVerifiers(args.numVerifiers);
        builder.add_numExecutors(args.numExecutors);
        builder.add_numCustomers(args.numCustomers);
        builder.finish()
    }

    #[inline]
    pub fn size_(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(ModifyContractTransactionBuffer::VT_SIZE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn signature(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    ModifyContractTransactionBuffer::VT_SIGNATURE,
                    None,
                )
        }
    }
    #[inline]
    pub fn signer(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    ModifyContractTransactionBuffer::VT_SIGNER,
                    None,
                )
        }
    }
    #[inline]
    pub fn version(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(ModifyContractTransactionBuffer::VT_VERSION, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn type_(&self) -> u16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u16>(ModifyContractTransactionBuffer::VT_TYPE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn max_fee(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    ModifyContractTransactionBuffer::VT_MAX_FEE,
                    None,
                )
        }
    }
    #[inline]
    pub fn deadline(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    ModifyContractTransactionBuffer::VT_DEADLINE,
                    None,
                )
        }
    }
    #[inline]
    pub fn durationDelta(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    ModifyContractTransactionBuffer::VT_DURATIONDELTA,
                    None,
                )
        }
    }
    #[inline]
    pub fn hash(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    ModifyContractTransactionBuffer::VT_HASH,
                    None,
                )
        }
    }
    #[inline]
    pub fn numCustomers(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(ModifyContractTransactionBuffer::VT_NUMCUSTOMERS, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn numExecutors(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(ModifyContractTransactionBuffer::VT_NUMEXECUTORS, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn numVerifiers(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(ModifyContractTransactionBuffer::VT_NUMVERIFIERS, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn customers(
        &self,
    ) -> Option<
        flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer<'a>>>,
    > {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<
                    'a,
                    flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer>,
                >,
            >>(ModifyContractTransactionBuffer::VT_CUSTOMERS, None)
        }
    }
    #[inline]
    pub fn executors(
        &self,
    ) -> Option<
        flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer<'a>>>,
    > {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<
                    'a,
                    flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer>,
                >,
            >>(ModifyContractTransactionBuffer::VT_EXECUTORS, None)
        }
    }
    #[inline]
    pub fn verifiers(
        &self,
    ) -> Option<
        flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer<'a>>>,
    > {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<
                    'a,
                    flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer>,
                >,
            >>(ModifyContractTransactionBuffer::VT_VERIFIERS, None)
        }
    }
}

impl flatbuffers::Verifiable for ModifyContractTransactionBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u32>("size_", Self::VT_SIZE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signature",
                Self::VT_SIGNATURE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signer",
                Self::VT_SIGNER,
                false,
            )?
            .visit_field::<u32>("version", Self::VT_VERSION, false)?
            .visit_field::<u16>("type_", Self::VT_TYPE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "max_fee",
                Self::VT_MAX_FEE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "deadline",
                Self::VT_DEADLINE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "durationDelta",
                Self::VT_DURATIONDELTA,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "hash",
                Self::VT_HASH,
                false,
            )?
            .visit_field::<u8>("numCustomers", Self::VT_NUMCUSTOMERS, false)?
            .visit_field::<u8>("numExecutors", Self::VT_NUMEXECUTORS, false)?
            .visit_field::<u8>("numVerifiers", Self::VT_NUMVERIFIERS, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<
                    '_,
                    flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer>,
                >,
            >>("customers", Self::VT_CUSTOMERS, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<
                    '_,
                    flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer>,
                >,
            >>("executors", Self::VT_EXECUTORS, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<
                    '_,
                    flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer>,
                >,
            >>("verifiers", Self::VT_VERIFIERS, false)?
            .finish();
        Ok(())
    }
}

pub struct ModifyContractTransactionBufferArgs<'a> {
    pub size_: u32,
    pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub signer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub version: u32,
    pub type_: u16,
    pub max_fee: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub deadline: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub durationDelta: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub hash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub numCustomers: u8,
    pub numExecutors: u8,
    pub numVerifiers: u8,
    pub customers: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<
                'a,
                flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer<'a>>,
            >,
        >,
    >,
    pub executors: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<
                'a,
                flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer<'a>>,
            >,
        >,
    >,
    pub verifiers: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<
                'a,
                flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer<'a>>,
            >,
        >,
    >,
}

impl<'a> Default for ModifyContractTransactionBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        ModifyContractTransactionBufferArgs {
            size_: 0,
            signature: None,
            signer: None,
            version: 0,
            type_: 0,
            max_fee: None,
            deadline: None,
            durationDelta: None,
            hash: None,
            numCustomers: 0,
            numExecutors: 0,
            numVerifiers: 0,
            customers: None,
            executors: None,
            verifiers: None,
        }
    }
}

pub struct ModifyContractTransactionBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> ModifyContractTransactionBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_size_(&mut self, size_: u32) {
        self.fbb_
            .push_slot::<u32>(ModifyContractTransactionBuffer::VT_SIZE_, size_, 0);
    }
    #[inline]
    pub fn add_signature(
        &mut self,
        signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ModifyContractTransactionBuffer::VT_SIGNATURE,
            signature,
        );
    }
    #[inline]
    pub fn add_signer(&mut self, signer: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ModifyContractTransactionBuffer::VT_SIGNER,
            signer,
        );
    }
    #[inline]
    pub fn add_version(&mut self, version: u32) {
        self.fbb_
            .push_slot::<u32>(ModifyContractTransactionBuffer::VT_VERSION, version, 0);
    }
    #[inline]
    pub fn add_type_(&mut self, type_: u16) {
        self.fbb_
            .push_slot::<u16>(ModifyContractTransactionBuffer::VT_TYPE_, type_, 0);
    }
    #[inline]
    pub fn add_max_fee(&mut self, max_fee: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ModifyContractTransactionBuffer::VT_MAX_FEE,
            max_fee,
        );
    }
    #[inline]
    pub fn add_deadline(&mut self, deadline: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ModifyContractTransactionBuffer::VT_DEADLINE,
            deadline,
        );
    }
    #[inline]
    pub fn add_durationDelta(
        &mut self,
        durationDelta: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ModifyContractTransactionBuffer::VT_DURATIONDELTA,
            durationDelta,
        );
    }
    #[inline]
    pub fn add_hash(&mut self, hash: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ModifyContractTransactionBuffer::VT_HASH,
            hash,
        );
    }
    #[inline]
    pub fn add_numCustomers(&mut self, numCustomers: u8) {
        self.fbb_.push_slot::<u8>(
            ModifyContractTransactionBuffer::VT_NUMCUSTOMERS,
            numCustomers,
            0,
        );
    }
    #[inline]
    pub fn add_numExecutors(&mut self, numExecutors: u8) {
        self.fbb_.push_slot::<u8>(
            ModifyContractTransactionBuffer::VT_NUMEXECUTORS,
            numExecutors,
            0,
        );
    }
    #[inline]
    pub fn add_numVerifiers(&mut self, numVerifiers: u8) {
        self.fbb_.push_slot::<u8>(
            ModifyContractTransactionBuffer::VT_NUMVERIFIERS,
            numVerifiers,
            0,
        );
    }
    #[inline]
    pub fn add_customers(
        &mut self,
        customers: flatbuffers::WIPOffset<
            flatbuffers::Vector<
                'b,
                flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer<'b>>,
            >,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ModifyContractTransactionBuffer::VT_CUSTOMERS,
            customers,
        );
    }
    #[inline]
    pub fn add_executors(
        &mut self,
        executors: flatbuffers::WIPOffset<
            flatbuffers::Vector<
                'b,
                flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer<'b>>,
            >,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ModifyContractTransactionBuffer::VT_EXECUTORS,
            executors,
        );
    }
    #[inline]
    pub fn add_verifiers(
        &mut self,
        verifiers: flatbuffers::WIPOffset<
            flatbuffers::Vector<
                'b,
                flatbuffers::ForwardsUOffset<CosignatoryModificationBuffer<'b>>,
            >,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ModifyContractTransactionBuffer::VT_VERIFIERS,
            verifiers,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> ModifyContractTransactionBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        ModifyContractTransactionBufferBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<ModifyContractTransactionBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for ModifyContractTransactionBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("ModifyContractTransactionBuffer");
        ds.field("size_", &self.size_());
        ds.field("signature", &self.signature());
        ds.field("signer", &self.signer());
        ds.field("version", &self.version());
        ds.field("type_", &self.type_());
        ds.field("max_fee", &self.max_fee());
        ds.field("deadline", &self.deadline());
        ds.field("durationDelta", &self.durationDelta());
        ds.field("hash", &self.hash());
        ds.field("numCustomers", &self.numCustomers());
        ds.field("numExecutors", &self.numExecutors());
        ds.field("numVerifiers", &self.numVerifiers());
        ds.field("customers", &self.customers());
        ds.field("executors", &self.executors());
        ds.field("verifiers", &self.verifiers());
        ds.finish()
    }
}

#[inline]
/// Verifies that a buffer of bytes contains a `ModifyContractTransactionBuffer`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_modify_contract_transaction_buffer_unchecked`.
pub fn root_as_modify_contract_transaction_buffer(
    buf: &[u8],
) -> Result<ModifyContractTransactionBuffer, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<ModifyContractTransactionBuffer>(buf)
}

#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ModifyContractTransactionBuffer` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_modify_contract_transaction_buffer_unchecked`.
pub fn size_prefixed_root_as_modify_contract_transaction_buffer(
    buf: &[u8],
) -> Result<ModifyContractTransactionBuffer, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<ModifyContractTransactionBuffer>(buf)
}

#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ModifyContractTransactionBuffer` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_modify_contract_transaction_buffer_unchecked`.
pub fn root_as_modify_contract_transaction_buffer_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<ModifyContractTransactionBuffer<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<ModifyContractTransactionBuffer<'b>>(opts, buf)
}

#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ModifyContractTransactionBuffer` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_modify_contract_transaction_buffer_unchecked`.
pub fn size_prefixed_root_as_modify_contract_transaction_buffer_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<ModifyContractTransactionBuffer<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<ModifyContractTransactionBuffer<'b>>(opts, buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ModifyContractTransactionBuffer and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ModifyContractTransactionBuffer`.
pub unsafe fn root_as_modify_contract_transaction_buffer_unchecked(
    buf: &[u8],
) -> ModifyContractTransactionBuffer {
    flatbuffers::root_unchecked::<ModifyContractTransactionBuffer>(buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ModifyContractTransactionBuffer and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ModifyContractTransactionBuffer`.
pub unsafe fn size_prefixed_root_as_modify_contract_transaction_buffer_unchecked(
    buf: &[u8],
) -> ModifyContractTransactionBuffer {
    flatbuffers::size_prefixed_root_unchecked::<ModifyContractTransactionBuffer>(buf)
}

#[inline]
pub fn finish_modify_contract_transaction_buffer_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ModifyContractTransactionBuffer<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_modify_contract_transaction_buffer_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ModifyContractTransactionBuffer<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
