// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::{EndianScalar, Follow};

pub enum FilesDepositTransactionBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct FilesDepositTransactionBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FilesDepositTransactionBuffer<'a> {
    type Inner = FilesDepositTransactionBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> FilesDepositTransactionBuffer<'a> {
    pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
    pub const VT_SIGNATURE: flatbuffers::VOffsetT = 6;
    pub const VT_SIGNER: flatbuffers::VOffsetT = 8;
    pub const VT_VERSION: flatbuffers::VOffsetT = 10;
    pub const VT_TYPE_: flatbuffers::VOffsetT = 12;
    pub const VT_MAX_FEE: flatbuffers::VOffsetT = 14;
    pub const VT_DEADLINE: flatbuffers::VOffsetT = 16;
    pub const VT_DRIVEKEY: flatbuffers::VOffsetT = 18;
    pub const VT_FILESCOUNT: flatbuffers::VOffsetT = 20;
    pub const VT_FILES: flatbuffers::VOffsetT = 22;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        FilesDepositTransactionBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args FilesDepositTransactionBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<FilesDepositTransactionBuffer<'bldr>> {
        let mut builder = FilesDepositTransactionBufferBuilder::new(_fbb);
        if let Some(x) = args.files {
            builder.add_files(x);
        }
        if let Some(x) = args.driveKey {
            builder.add_driveKey(x);
        }
        if let Some(x) = args.deadline {
            builder.add_deadline(x);
        }
        if let Some(x) = args.max_fee {
            builder.add_max_fee(x);
        }
        builder.add_version(args.version);
        if let Some(x) = args.signer {
            builder.add_signer(x);
        }
        if let Some(x) = args.signature {
            builder.add_signature(x);
        }
        builder.add_size_(args.size_);
        builder.add_filesCount(args.filesCount);
        builder.add_type_(args.type_);
        builder.finish()
    }

    #[inline]
    pub fn size_(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(FilesDepositTransactionBuffer::VT_SIZE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn signature(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    FilesDepositTransactionBuffer::VT_SIGNATURE,
                    None,
                )
        }
    }
    #[inline]
    pub fn signer(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    FilesDepositTransactionBuffer::VT_SIGNER,
                    None,
                )
        }
    }
    #[inline]
    pub fn version(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(FilesDepositTransactionBuffer::VT_VERSION, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn type_(&self) -> u16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u16>(FilesDepositTransactionBuffer::VT_TYPE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn max_fee(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    FilesDepositTransactionBuffer::VT_MAX_FEE,
                    None,
                )
        }
    }
    #[inline]
    pub fn deadline(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    FilesDepositTransactionBuffer::VT_DEADLINE,
                    None,
                )
        }
    }
    #[inline]
    pub fn driveKey(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    FilesDepositTransactionBuffer::VT_DRIVEKEY,
                    None,
                )
        }
    }
    #[inline]
    pub fn filesCount(&self) -> u16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u16>(FilesDepositTransactionBuffer::VT_FILESCOUNT, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn files(
        &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FileBuffer<'a>>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FileBuffer>>,
            >>(FilesDepositTransactionBuffer::VT_FILES, None)
        }
    }
}

impl flatbuffers::Verifiable for FilesDepositTransactionBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u32>("size_", Self::VT_SIZE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signature",
                Self::VT_SIGNATURE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signer",
                Self::VT_SIGNER,
                false,
            )?
            .visit_field::<u32>("version", Self::VT_VERSION, false)?
            .visit_field::<u16>("type_", Self::VT_TYPE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "max_fee",
                Self::VT_MAX_FEE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "deadline",
                Self::VT_DEADLINE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "driveKey",
                Self::VT_DRIVEKEY,
                false,
            )?
            .visit_field::<u16>("filesCount", Self::VT_FILESCOUNT, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FileBuffer>>,
            >>("files", Self::VT_FILES, false)?
            .finish();
        Ok(())
    }
}

pub struct FilesDepositTransactionBufferArgs<'a> {
    pub size_: u32,
    pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub signer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub version: u32,
    pub type_: u16,
    pub max_fee: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub deadline: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub driveKey: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub filesCount: u16,
    pub files: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FileBuffer<'a>>>,
        >,
    >,
}

impl<'a> Default for FilesDepositTransactionBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        FilesDepositTransactionBufferArgs {
            size_: 0,
            signature: None,
            signer: None,
            version: 0,
            type_: 0,
            max_fee: None,
            deadline: None,
            driveKey: None,
            filesCount: 0,
            files: None,
        }
    }
}

pub struct FilesDepositTransactionBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> FilesDepositTransactionBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_size_(&mut self, size_: u32) {
        self.fbb_
            .push_slot::<u32>(FilesDepositTransactionBuffer::VT_SIZE_, size_, 0);
    }
    #[inline]
    pub fn add_signature(
        &mut self,
        signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            FilesDepositTransactionBuffer::VT_SIGNATURE,
            signature,
        );
    }
    #[inline]
    pub fn add_signer(&mut self, signer: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            FilesDepositTransactionBuffer::VT_SIGNER,
            signer,
        );
    }
    #[inline]
    pub fn add_version(&mut self, version: u32) {
        self.fbb_
            .push_slot::<u32>(FilesDepositTransactionBuffer::VT_VERSION, version, 0);
    }
    #[inline]
    pub fn add_type_(&mut self, type_: u16) {
        self.fbb_
            .push_slot::<u16>(FilesDepositTransactionBuffer::VT_TYPE_, type_, 0);
    }
    #[inline]
    pub fn add_max_fee(&mut self, max_fee: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            FilesDepositTransactionBuffer::VT_MAX_FEE,
            max_fee,
        );
    }
    #[inline]
    pub fn add_deadline(&mut self, deadline: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            FilesDepositTransactionBuffer::VT_DEADLINE,
            deadline,
        );
    }
    #[inline]
    pub fn add_driveKey(&mut self, driveKey: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            FilesDepositTransactionBuffer::VT_DRIVEKEY,
            driveKey,
        );
    }
    #[inline]
    pub fn add_filesCount(&mut self, filesCount: u16) {
        self.fbb_
            .push_slot::<u16>(FilesDepositTransactionBuffer::VT_FILESCOUNT, filesCount, 0);
    }
    #[inline]
    pub fn add_files(
        &mut self,
        files: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<FileBuffer<'b>>>,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            FilesDepositTransactionBuffer::VT_FILES,
            files,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> FilesDepositTransactionBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        FilesDepositTransactionBufferBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<FilesDepositTransactionBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for FilesDepositTransactionBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("FilesDepositTransactionBuffer");
        ds.field("size_", &self.size_());
        ds.field("signature", &self.signature());
        ds.field("signer", &self.signer());
        ds.field("version", &self.version());
        ds.field("type_", &self.type_());
        ds.field("max_fee", &self.max_fee());
        ds.field("deadline", &self.deadline());
        ds.field("driveKey", &self.driveKey());
        ds.field("filesCount", &self.filesCount());
        ds.field("files", &self.files());
        ds.finish()
    }
}
