// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::Follow;

pub enum CosignatoryModificationBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct CosignatoryModificationBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CosignatoryModificationBuffer<'a> {
    type Inner = CosignatoryModificationBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
    }
}

impl<'a> CosignatoryModificationBuffer<'a> {
    pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
    pub const VT_COSIGNATORY_PUBLIC_KEY: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        CosignatoryModificationBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args CosignatoryModificationBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<CosignatoryModificationBuffer<'bldr>> {
        let mut builder = CosignatoryModificationBufferBuilder::new(_fbb);
        if let Some(x) = args.cosignatory_public_key {
            builder.add_cosignatory_public_key(x);
        }
        builder.add_type_(args.type_);
        builder.finish()
    }

    #[inline]
    pub fn type_(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u8>(CosignatoryModificationBuffer::VT_TYPE_, Some(0)).unwrap() }
    }
    #[inline]
    pub fn cosignatory_public_key(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                CosignatoryModificationBuffer::VT_COSIGNATORY_PUBLIC_KEY,
                None,
            )
        }
    }
}

impl flatbuffers::Verifiable for CosignatoryModificationBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        v.visit_table(pos)?
            .visit_field::<u8>("type_", Self::VT_TYPE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "cosignatory_public_key",
                Self::VT_COSIGNATORY_PUBLIC_KEY,
                false,
            )?
            .finish();
        Ok(())
    }
}

pub struct CosignatoryModificationBufferArgs<'a> {
    pub type_: u8,
    pub cosignatory_public_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}

impl<'a> Default for CosignatoryModificationBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        CosignatoryModificationBufferArgs { type_: 0, cosignatory_public_key: None }
    }
}

pub struct CosignatoryModificationBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> CosignatoryModificationBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_type_(&mut self, type_: u8) {
        self.fbb_.push_slot::<u8>(CosignatoryModificationBuffer::VT_TYPE_, type_, 0);
    }
    #[inline]
    pub fn add_cosignatory_public_key(
        &mut self,
        cosignatory_public_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            CosignatoryModificationBuffer::VT_COSIGNATORY_PUBLIC_KEY,
            cosignatory_public_key,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> CosignatoryModificationBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        CosignatoryModificationBufferBuilder { fbb_: _fbb, start_: start }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<CosignatoryModificationBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for CosignatoryModificationBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("CosignatoryModificationBuffer");
        ds.field("type_", &self.type_());
        ds.field("cosignatory_public_key", &self.cosignatory_public_key());
        ds.finish()
    }
}
