// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::{EndianScalar, Follow};

pub enum VerificationFailureBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct VerificationFailureBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VerificationFailureBuffer<'a> {
    type Inner = VerificationFailureBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> VerificationFailureBuffer<'a> {
    pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
    pub const VT_REPLICATOR: flatbuffers::VOffsetT = 6;
    pub const VT_BLOCKHASHES: flatbuffers::VOffsetT = 8;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        VerificationFailureBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args VerificationFailureBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<VerificationFailureBuffer<'bldr>> {
        let mut builder = VerificationFailureBufferBuilder::new(_fbb);
        if let Some(x) = args.blockHashes {
            builder.add_blockHashes(x);
        }
        if let Some(x) = args.replicator {
            builder.add_replicator(x);
        }
        builder.add_size_(args.size_);
        builder.finish()
    }

    #[inline]
    pub fn size_(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(VerificationFailureBuffer::VT_SIZE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn replicator(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    VerificationFailureBuffer::VT_REPLICATOR,
                    None,
                )
        }
    }
    #[inline]
    pub fn blockHashes(
        &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockHashBuffer<'a>>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockHashBuffer>>,
            >>(VerificationFailureBuffer::VT_BLOCKHASHES, None)
        }
    }
}

impl flatbuffers::Verifiable for VerificationFailureBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u32>("size_", Self::VT_SIZE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "replicator",
                Self::VT_REPLICATOR,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BlockHashBuffer>>,
            >>("blockHashes", Self::VT_BLOCKHASHES, false)?
            .finish();
        Ok(())
    }
}

pub struct VerificationFailureBufferArgs<'a> {
    pub size_: u32,
    pub replicator: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub blockHashes: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockHashBuffer<'a>>>,
        >,
    >,
}

impl<'a> Default for VerificationFailureBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        VerificationFailureBufferArgs {
            size_: 0,
            replicator: None,
            blockHashes: None,
        }
    }
}

pub struct VerificationFailureBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> VerificationFailureBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_size_(&mut self, size_: u32) {
        self.fbb_
            .push_slot::<u32>(VerificationFailureBuffer::VT_SIZE_, size_, 0);
    }
    #[inline]
    pub fn add_replicator(
        &mut self,
        replicator: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            VerificationFailureBuffer::VT_REPLICATOR,
            replicator,
        );
    }
    #[inline]
    pub fn add_blockHashes(
        &mut self,
        blockHashes: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<BlockHashBuffer<'b>>>,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            VerificationFailureBuffer::VT_BLOCKHASHES,
            blockHashes,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> VerificationFailureBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        VerificationFailureBufferBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<VerificationFailureBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for VerificationFailureBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("VerificationFailureBuffer");
        ds.field("size_", &self.size_());
        ds.field("replicator", &self.replicator());
        ds.field("blockHashes", &self.blockHashes());
        ds.finish()
    }
}
