// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::Follow;

pub enum MosaicBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct MosaicBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MosaicBuffer<'a> {
    type Inner = MosaicBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
    }
}

impl<'a> MosaicBuffer<'a> {
    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_AMOUNT: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MosaicBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MosaicBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<MosaicBuffer<'bldr>> {
        let mut builder = MosaicBufferBuilder::new(_fbb);
        if let Some(x) = args.amount {
            builder.add_amount(x);
        }
        if let Some(x) = args.id {
            builder.add_id(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn id(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                MosaicBuffer::VT_ID,
                None,
            )
        }
    }
    #[inline]
    pub fn amount(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                MosaicBuffer::VT_AMOUNT,
                None,
            )
        }
    }
}

impl flatbuffers::Verifiable for MosaicBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "id",
                Self::VT_ID,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "amount",
                Self::VT_AMOUNT,
                false,
            )?
            .finish();
        Ok(())
    }
}

pub struct MosaicBufferArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub amount: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
}

impl<'a> Default for MosaicBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        MosaicBufferArgs { id: None, amount: None }
    }
}

pub struct MosaicBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> MosaicBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_id(&mut self, id: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MosaicBuffer::VT_ID, id);
    }
    #[inline]
    pub fn add_amount(&mut self, amount: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(MosaicBuffer::VT_AMOUNT, amount);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MosaicBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        MosaicBufferBuilder { fbb_: _fbb, start_: start }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<MosaicBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for MosaicBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("MosaicBuffer");
        ds.field("id", &self.id());
        ds.field("amount", &self.amount());
        ds.finish()
    }
}
