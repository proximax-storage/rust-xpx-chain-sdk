// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::Follow;

pub enum MosaicDefinitionTransactionBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct MosaicDefinitionTransactionBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MosaicDefinitionTransactionBuffer<'a> {
    type Inner = MosaicDefinitionTransactionBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
    }
}

impl<'a> MosaicDefinitionTransactionBuffer<'a> {
    pub const VT_SIZE_: flatbuffers::VOffsetT = 4;
    pub const VT_SIGNATURE: flatbuffers::VOffsetT = 6;
    pub const VT_SIGNER: flatbuffers::VOffsetT = 8;
    pub const VT_VERSION: flatbuffers::VOffsetT = 10;
    pub const VT_TYPE_: flatbuffers::VOffsetT = 12;
    pub const VT_MAX_FEE: flatbuffers::VOffsetT = 14;
    pub const VT_DEADLINE: flatbuffers::VOffsetT = 16;
    pub const VT_MOSAIC_NONCE: flatbuffers::VOffsetT = 18;
    pub const VT_MOSAIC_ID: flatbuffers::VOffsetT = 20;
    pub const VT_NUM_OPTIONAL_PROPERTIES: flatbuffers::VOffsetT = 22;
    pub const VT_FLAGS: flatbuffers::VOffsetT = 24;
    pub const VT_DIVISIBILITY: flatbuffers::VOffsetT = 26;
    pub const VT_OPTIONAL_PROPERTIES: flatbuffers::VOffsetT = 28;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MosaicDefinitionTransactionBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MosaicDefinitionTransactionBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<MosaicDefinitionTransactionBuffer<'bldr>> {
        let mut builder = MosaicDefinitionTransactionBufferBuilder::new(_fbb);
        if let Some(x) = args.optional_properties {
            builder.add_optional_properties(x);
        }
        if let Some(x) = args.mosaic_id {
            builder.add_mosaic_id(x);
        }
        builder.add_mosaic_nonce(args.mosaic_nonce);
        if let Some(x) = args.deadline {
            builder.add_deadline(x);
        }
        if let Some(x) = args.max_fee {
            builder.add_max_fee(x);
        }
        builder.add_version(args.version);
        if let Some(x) = args.signer {
            builder.add_signer(x);
        }
        if let Some(x) = args.signature {
            builder.add_signature(x);
        }
        builder.add_size_(args.size_);
        builder.add_type_(args.type_);
        builder.add_divisibility(args.divisibility);
        builder.add_flags(args.flags);
        builder.add_num_optional_properties(args.num_optional_properties);
        builder.finish()
    }

    #[inline]
    pub fn size_(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(MosaicDefinitionTransactionBuffer::VT_SIZE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn signature(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                MosaicDefinitionTransactionBuffer::VT_SIGNATURE,
                None,
            )
        }
    }
    #[inline]
    pub fn signer(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                MosaicDefinitionTransactionBuffer::VT_SIGNER,
                None,
            )
        }
    }
    #[inline]
    pub fn version(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(MosaicDefinitionTransactionBuffer::VT_VERSION, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn type_(&self) -> u16 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u16>(MosaicDefinitionTransactionBuffer::VT_TYPE_, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn max_fee(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                MosaicDefinitionTransactionBuffer::VT_MAX_FEE,
                None,
            )
        }
    }
    #[inline]
    pub fn deadline(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                MosaicDefinitionTransactionBuffer::VT_DEADLINE,
                None,
            )
        }
    }
    #[inline]
    pub fn mosaic_nonce(&self) -> u32 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u32>(MosaicDefinitionTransactionBuffer::VT_MOSAIC_NONCE, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn mosaic_id(&self) -> Option<flatbuffers::Vector<'a, u32>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                MosaicDefinitionTransactionBuffer::VT_MOSAIC_ID,
                None,
            )
        }
    }
    #[inline]
    pub fn num_optional_properties(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(MosaicDefinitionTransactionBuffer::VT_NUM_OPTIONAL_PROPERTIES, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn flags(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(MosaicDefinitionTransactionBuffer::VT_FLAGS, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn divisibility(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u8>(MosaicDefinitionTransactionBuffer::VT_DIVISIBILITY, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn optional_properties(
        &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MosaicProperty<'a>>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MosaicProperty>>,
            >>(MosaicDefinitionTransactionBuffer::VT_OPTIONAL_PROPERTIES, None)
        }
    }
}

impl flatbuffers::Verifiable for MosaicDefinitionTransactionBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        v.visit_table(pos)?
            .visit_field::<u32>("size_", Self::VT_SIZE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signature",
                Self::VT_SIGNATURE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "signer",
                Self::VT_SIGNER,
                false,
            )?
            .visit_field::<u32>("version", Self::VT_VERSION, false)?
            .visit_field::<u16>("type_", Self::VT_TYPE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "max_fee",
                Self::VT_MAX_FEE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "deadline",
                Self::VT_DEADLINE,
                false,
            )?
            .visit_field::<u32>("mosaic_nonce", Self::VT_MOSAIC_NONCE, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                "mosaic_id",
                Self::VT_MOSAIC_ID,
                false,
            )?
            .visit_field::<u8>("num_optional_properties", Self::VT_NUM_OPTIONAL_PROPERTIES, false)?
            .visit_field::<u8>("flags", Self::VT_FLAGS, false)?
            .visit_field::<u8>("divisibility", Self::VT_DIVISIBILITY, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MosaicProperty>>,
            >>("optional_properties", Self::VT_OPTIONAL_PROPERTIES, false)?
            .finish();
        Ok(())
    }
}

pub struct MosaicDefinitionTransactionBufferArgs<'a> {
    pub size_: u32,
    pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub signer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub version: u32,
    pub type_: u16,
    pub max_fee: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub deadline: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub mosaic_nonce: u32,
    pub mosaic_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub num_optional_properties: u8,
    pub flags: u8,
    pub divisibility: u8,
    pub optional_properties: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MosaicProperty<'a>>>,
        >,
    >,
}

impl<'a> Default for MosaicDefinitionTransactionBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        MosaicDefinitionTransactionBufferArgs {
            size_: 0,
            signature: None,
            signer: None,
            version: 0,
            type_: 0,
            max_fee: None,
            deadline: None,
            mosaic_nonce: 0,
            mosaic_id: None,
            num_optional_properties: 0,
            flags: 0,
            divisibility: 0,
            optional_properties: None,
        }
    }
}

pub struct MosaicDefinitionTransactionBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> MosaicDefinitionTransactionBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_size_(&mut self, size_: u32) {
        self.fbb_
            .push_slot::<u32>(MosaicDefinitionTransactionBuffer::VT_SIZE_, size_, 0);
    }
    #[inline]
    pub fn add_signature(
        &mut self,
        signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            MosaicDefinitionTransactionBuffer::VT_SIGNATURE,
            signature,
        );
    }
    #[inline]
    pub fn add_signer(&mut self, signer: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            MosaicDefinitionTransactionBuffer::VT_SIGNER,
            signer,
        );
    }
    #[inline]
    pub fn add_version(&mut self, version: u32) {
        self.fbb_
            .push_slot::<u32>(MosaicDefinitionTransactionBuffer::VT_VERSION, version, 0);
    }
    #[inline]
    pub fn add_type_(&mut self, type_: u16) {
        self.fbb_
            .push_slot::<u16>(MosaicDefinitionTransactionBuffer::VT_TYPE_, type_, 0);
    }
    #[inline]
    pub fn add_max_fee(&mut self, max_fee: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            MosaicDefinitionTransactionBuffer::VT_MAX_FEE,
            max_fee,
        );
    }
    #[inline]
    pub fn add_deadline(&mut self, deadline: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            MosaicDefinitionTransactionBuffer::VT_DEADLINE,
            deadline,
        );
    }
    #[inline]
    pub fn add_mosaic_nonce(&mut self, mosaic_nonce: u32) {
        self.fbb_.push_slot::<u32>(
            MosaicDefinitionTransactionBuffer::VT_MOSAIC_NONCE,
            mosaic_nonce,
            0,
        );
    }
    #[inline]
    pub fn add_mosaic_id(
        &mut self,
        mosaic_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            MosaicDefinitionTransactionBuffer::VT_MOSAIC_ID,
            mosaic_id,
        );
    }
    #[inline]
    pub fn add_num_optional_properties(&mut self, num_optional_properties: u8) {
        self.fbb_.push_slot::<u8>(
            MosaicDefinitionTransactionBuffer::VT_NUM_OPTIONAL_PROPERTIES,
            num_optional_properties,
            0,
        );
    }
    #[inline]
    pub fn add_flags(&mut self, flags: u8) {
        self.fbb_.push_slot::<u8>(MosaicDefinitionTransactionBuffer::VT_FLAGS, flags, 0);
    }
    #[inline]
    pub fn add_divisibility(&mut self, divisibility: u8) {
        self.fbb_.push_slot::<u8>(
            MosaicDefinitionTransactionBuffer::VT_DIVISIBILITY,
            divisibility,
            0,
        );
    }
    #[inline]
    pub fn add_optional_properties(
        &mut self,
        optional_properties: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<MosaicProperty<'b>>>,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            MosaicDefinitionTransactionBuffer::VT_OPTIONAL_PROPERTIES,
            optional_properties,
        );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    ) -> MosaicDefinitionTransactionBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        MosaicDefinitionTransactionBufferBuilder { fbb_: _fbb, start_: start }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<MosaicDefinitionTransactionBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for MosaicDefinitionTransactionBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("MosaicDefinitionTransactionBuffer");
        ds.field("size_", &self.size_());
        ds.field("signature", &self.signature());
        ds.field("signer", &self.signer());
        ds.field("version", &self.version());
        ds.field("type_", &self.type_());
        ds.field("max_fee", &self.max_fee());
        ds.field("deadline", &self.deadline());
        ds.field("mosaic_nonce", &self.mosaic_nonce());
        ds.field("mosaic_id", &self.mosaic_id());
        ds.field("num_optional_properties", &self.num_optional_properties());
        ds.field("flags", &self.flags());
        ds.field("divisibility", &self.divisibility());
        ds.field("optional_properties", &self.optional_properties());
        ds.finish()
    }
}

#[inline]
/// Verifies that a buffer of bytes contains a `MosaicDefinitionTransactionBuffer`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mosaic_definition_transaction_buffer_unchecked`.
pub fn root_as_mosaic_definition_transaction_buffer(
    buf: &[u8],
) -> Result<MosaicDefinitionTransactionBuffer, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<MosaicDefinitionTransactionBuffer>(buf)
}

#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MosaicDefinitionTransactionBuffer` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mosaic_definition_transaction_buffer_unchecked`.
pub fn size_prefixed_root_as_mosaic_definition_transaction_buffer(
    buf: &[u8],
) -> Result<MosaicDefinitionTransactionBuffer, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<MosaicDefinitionTransactionBuffer>(buf)
}

#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MosaicDefinitionTransactionBuffer` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mosaic_definition_transaction_buffer_unchecked`.
pub fn root_as_mosaic_definition_transaction_buffer_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<MosaicDefinitionTransactionBuffer<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<MosaicDefinitionTransactionBuffer<'b>>(opts, buf)
}

#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MosaicDefinitionTransactionBuffer` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mosaic_definition_transaction_buffer_unchecked`.
pub fn size_prefixed_root_as_mosaic_definition_transaction_buffer_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<MosaicDefinitionTransactionBuffer<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<MosaicDefinitionTransactionBuffer<'b>>(opts, buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MosaicDefinitionTransactionBuffer and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MosaicDefinitionTransactionBuffer`.
pub unsafe fn root_as_mosaic_definition_transaction_buffer_unchecked(
    buf: &[u8],
) -> MosaicDefinitionTransactionBuffer {
    flatbuffers::root_unchecked::<MosaicDefinitionTransactionBuffer>(buf)
}

#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MosaicDefinitionTransactionBuffer and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MosaicDefinitionTransactionBuffer`.
pub unsafe fn size_prefixed_root_as_mosaic_definition_transaction_buffer_unchecked(
    buf: &[u8],
) -> MosaicDefinitionTransactionBuffer {
    flatbuffers::size_prefixed_root_unchecked::<MosaicDefinitionTransactionBuffer>(buf)
}

#[inline]
pub fn finish_mosaic_definition_transaction_buffer_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<MosaicDefinitionTransactionBuffer<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_mosaic_definition_transaction_buffer_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<MosaicDefinitionTransactionBuffer<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
