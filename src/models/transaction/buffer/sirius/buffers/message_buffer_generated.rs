// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;

use super::*;

use self::flatbuffers::Follow;

pub enum MessageBufferOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct MessageBuffer<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MessageBuffer<'a> {
    type Inner = MessageBuffer<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
    }
}

impl<'a> MessageBuffer<'a> {
    pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
    pub const VT_PAYLOAD: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MessageBuffer { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MessageBufferArgs<'args>,
    ) -> flatbuffers::WIPOffset<MessageBuffer<'bldr>> {
        let mut builder = MessageBufferBuilder::new(_fbb);
        if let Some(x) = args.payload {
            builder.add_payload(x);
        }
        builder.add_type_(args.type_);
        builder.finish()
    }

    #[inline]
    pub fn type_(&self) -> u8 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u8>(MessageBuffer::VT_TYPE_, Some(0)).unwrap() }
    }
    #[inline]
    pub fn payload(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                MessageBuffer::VT_PAYLOAD,
                None,
            )
        }
    }
}

impl flatbuffers::Verifiable for MessageBuffer<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        v.visit_table(pos)?
            .visit_field::<u8>("type_", Self::VT_TYPE_, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "payload",
                Self::VT_PAYLOAD,
                false,
            )?
            .finish();
        Ok(())
    }
}

pub struct MessageBufferArgs<'a> {
    pub type_: u8,
    pub payload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}

impl<'a> Default for MessageBufferArgs<'a> {
    #[inline]
    fn default() -> Self {
        MessageBufferArgs { type_: 0, payload: None }
    }
}

pub struct MessageBufferBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> MessageBufferBuilder<'a, 'b> {
    #[inline]
    pub fn add_type_(&mut self, type_: u8) {
        self.fbb_.push_slot::<u8>(MessageBuffer::VT_TYPE_, type_, 0);
    }
    #[inline]
    pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(MessageBuffer::VT_PAYLOAD, payload);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MessageBufferBuilder<'a, 'b> {
        let start = _fbb.start_table();
        MessageBufferBuilder { fbb_: _fbb, start_: start }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<MessageBuffer<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for MessageBuffer<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("MessageBuffer");
        ds.field("type_", &self.type_());
        ds.field("payload", &self.payload());
        ds.finish()
    }
}
