/*
 * Copyright 2018 ProximaX Limited. All rights reserved.
 * Use of this source code is governed by the Apache 2.0
 * license that can be found in the LICENSE file.
 */

use crypto::Signature;

use crate::account::PublicAccount;
use crate::helpers::TransactionHash;
use crate::network::NetworkType;

use super::{AbsVector, Amount, Deadline, TransactionInfo, TransactionType, TransactionVersion};

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CommonTransaction {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub transaction_info: Option<TransactionInfo>,

    pub network_type: NetworkType,

    /// The signature was generated by the signer and can be used to validate tha the entity
    /// data was not modified by a node.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub signature: Option<Signature>,

    /// The 'PublicAccount' of the entity signer formatted as hexadecimal.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub signer: Option<PublicAccount>,

    /// The transaction version.
    pub version: TransactionVersion,

    /// The transaction type.
    #[serde(rename = "type")]
    pub transaction_type: TransactionType,

    /// The maximum fee allowed to be spent for this transaction.
    ///
    /// The higher the fee, the higher the priority of the transaction. Transactions with high
    /// priority get included in a block before transactions with lower priority.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max_fee: Option<Amount>,

    /// The 'Deadline' for the transaction to be included in a block before it expires.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deadline: Option<Deadline>,
}

impl CommonTransaction {
    pub(crate) fn get_hash(&self) -> TransactionHash {
        match self.transaction_info.to_owned() {
            Some(h) => match h.hash {
                Some(hs) => hs,
                _ => TransactionHash::zero(),
            },
            _ => TransactionHash::zero(),
        }
    }

    pub fn create_from_type(
        transaction_type: TransactionType,
        network_type: NetworkType,
        version: TransactionVersion,
        deadline: Option<Deadline>,
        max_fee: Option<u64>,
    ) -> Self {
        CommonTransaction {
            transaction_info: None,
            network_type,
            signature: Default::default(),
            signer: None,
            version,
            transaction_type,
            max_fee,
            deadline,
        }
    }

    pub fn is_unconfirmed(&self) -> bool {
        if let Some(ref transaction_info) = self.transaction_info {
            transaction_info.height == 0
                && transaction_info.hash.is_some()
                && transaction_info.merkle_component_hash.is_some()
                && transaction_info.hash.unwrap_or_default()
                == transaction_info.merkle_component_hash.unwrap_or_default()
        } else {
            false
        }
    }

    pub fn is_confirmed(&self) -> bool {
        if let Some(tx_info) = &self.transaction_info {
            tx_info.height > 0
        } else {
            false
        }
    }

    pub fn has_missing_signatures(&self) -> bool {
        if let Some(ref transaction_info) = self.transaction_info {
            transaction_info.height == 0
                && transaction_info.hash.is_some()
                && transaction_info.merkle_component_hash.is_some()
                && transaction_info.hash.unwrap_or_default()
                != transaction_info.merkle_component_hash.unwrap_or_default()
        } else {
            false
        }
    }

    pub fn is_unannounced(&self) -> bool {
        if let Some(tx_info) = &self.transaction_info {
            tx_info.hash.is_some() || tx_info.aggregate_hash.is_some()
        } else {
            false
        }
    }

    pub(crate) fn set_aggregate(&mut self, signer: PublicAccount) {
        self.signer = Some(signer);
    }

    pub(crate) fn build_vector<'a>(
        &self,
        builder: &mut fb::FlatBufferBuilder<'a>,
    ) -> AbsVector<'a> {
        AbsVector::build_vector(self, builder)
    }
}

impl core::fmt::Display for CommonTransaction {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        write!(f, "{}", serde_json::to_string_pretty(&self).unwrap_or_default())
    }
}
